@inject NavigationManager NavigationManager


<SfTreeView TValue="TreeItem"
            @ref="_treeView"
            ExpandOn="ExpandAction.Click"
            SelectedNodes="_selectedNodes"
            FullRowNavigable="true">
    <TreeViewFieldsSettings DataSource="@_treeDataSource"
                            Id="NodeId"
                            Text="NodeText"
                            TValue="TreeItem"
                            IconCss="Icon"
                            NavigateUrl="Url"
                            Child="@("Child")">
    </TreeViewFieldsSettings>
    <TreeViewEvents TValue="TreeItem"
                    NodeSelecting="OnNodeSelecting"/>
</SfTreeView>

@code{
    List<TreeItem>? _treeDataSource;
    SfTreeView<TreeItem>? _treeView;
    string[] _selectedNodes = { "" };

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _treeDataSource = NavigationTreeData.GetNavigationTree();
        NavigationManager.LocationChanged += LocationChanged;
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }

    private void LocationChanged(object? sender, LocationChangedEventArgs e)
    {
        var url = e.Location;
        url = url.Replace(NavigationManager.BaseUri, "");
        if (url == "")
        {
            _selectedNodes[0] = "";
            StateHasChanged();
        }
        else
        {
            var navigatedNode = TreeItem.FindNodeByUrl(_treeDataSource!, url);
            if (navigatedNode != null)
            {
                _selectedNodes[0] = navigatedNode.NodeId;
                ExpandNodes(navigatedNode.NodeId);
            }
        }
    }

    void ExpandNodes(string nodeId)
    {
        var nodesToExpand = TreeItem.FindParentIds(_treeDataSource!, nodeId);
        _treeView!.ExpandAllAsync(nodesToExpand.ToArray());
        StateHasChanged();
    }

    void OnNodeSelecting(NodeSelectEventArgs args)
    {
        if (args.NodeData.HasChildren)
        {
            args.Cancel = true;
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            var url = NavigationManager.Uri.Replace(NavigationManager.BaseUri, "");
            var navigatedNode = TreeItem.FindNodeByUrl(_treeDataSource!, url);
            _selectedNodes[0] = navigatedNode?.NodeId ?? "";
            if (navigatedNode != null)
            {
                ExpandNodes(navigatedNode.NodeId);
            }
        }
    }

}


@*remove focus styling when not selected*@
<style>
    .e-treeview .e-list-item.e-node-focus>.e-fullrow {
        background-color: rgba(0,0,0,0);
        border-color:  rgba(0,0,0,0) ;
    }
     .e-treeview .e-list-item.e-hover>.e-fullrow {
            background-color: #e9ecef;
            border-color: #e9ecef ;
        }
</style>