@inject NavigationManager NavigationManager

@if (_selection is not null)
{
    <p>@((_selection as TreeItem).NodeText)</p>    
}

<RadzenTree Data="_treeDataSource" Change="NodeSelected" @ref="_radzenTreeView" @bind-Value="_selection">
    <RadzenTreeLevel 
        TextProperty="@nameof(TreeItem.NodeText)" ChildrenProperty="@nameof(TreeItem.Child)"
        HasChildren="item => HasChildren(item as TreeItem)"
        />
</RadzenTree>

@code{
    List<TreeItem>? _treeDataSource;
    
    private RadzenTree _radzenTreeView;
    private object _selection;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _treeDataSource = NavigationTreeData.GetNavigationTree();
        NavigationManager.LocationChanged += LocationChanged;
    }

    private void LocationChanged(object? sender, LocationChangedEventArgs e)
    {
        var url = e.Location;
        url = url.Replace(NavigationManager.BaseUri, "");
        if (url == "")
        {
            _selection = null;
            
            StateHasChanged();
        }
        else
        {
            var navigatedNode = TreeItem.FindNodeByUrl(_treeDataSource!, url);
            if (navigatedNode != null)
            {
                _selection = navigatedNode;
            }
            StateHasChanged();
        }
    }
    
    void SelectTreeItem(string url)
    {
        var node = TreeItem.FindNodeByUrl(_treeDataSource, url);
        if (node is not null)
        {
            _selection = node;    
        }
    }
    
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            var url = NavigationManager.Uri.Replace(NavigationManager.BaseUri, "");
            if (!string.IsNullOrWhiteSpace(url))
            {
                SelectTreeItem(url);
            }
        }
    }

    private bool HasChildren(TreeItem? item)
    {
        return item?.Child != null && item.Child.Any();
    }

    private void NodeSelected(TreeEventArgs obj)
    {
        if(obj.Value is TreeItem treeItem && !string.IsNullOrWhiteSpace(treeItem.Url) )
        {
            NavigationManager.NavigateTo(treeItem.Url);
        }   
    }
}