@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Buttons
@using System.Globalization
@using System.Reflection
@using System.Text
@inject NavigationManager NavigationManager

@*Initialize the TreeView component*@

@using global::Blazorise.TreeView

<SfTreeView TValue="TreeItem" @ref="tree">
    <TreeViewFieldsSettings DataSource="@TreeDataSource"
                            Id="NodeId" Text="NodeText" Expanded="Expanded"
                            TValue="TreeItem"

                            Child="@("Child")">
    </TreeViewFieldsSettings>
    <TreeViewEvents TValue="TreeItem" NodeSelected="NodeSelected">

    </TreeViewEvents>
</SfTreeView>

@* <TreeView Nodes="@TreeDataSource" *@
@*           GetChildNodes="@(item => item.Child)" *@
@*           HasChildNodes="@(item => item.Child?.Any() == true)" *@
@*           SelectedNodeChange="sele"> *@
@*     <NodeContent> *@
@*         <Icon Name="IconName.Folder" /> *@
@*         @context.NodeText *@
@*     </NodeContent> *@
@* </TreeView> *@

@* <SfTreeView TValue="TreeItem" SelectedNodesChanged="NodeSelected"> *@
@*     <TreeViewFieldsSettings DataSource="@TreeDataSource" *@
@*                             Id="NodeId" Text="NodeText" Expanded="Expanded" *@
@*                             TValue="TreeItem" *@
@*                             NavigateUrl="Url" *@
@*                             Child="@("Child")"  > *@
@*     </TreeViewFieldsSettings> *@
@* </SfTreeView> *@

@code{

    // Specifies the DataSource value for TreeView component.
    List<TreeItem> TreeDataSource = new List<TreeItem>();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        TreeDataSource = NavigationTreeData.GetNavigationTree();

    }


 

    public class TreeItem
    {
        public string NodeId { get; set; } = null!;
        public string NodeText { get; set; } = null!;
        public string Icon { get; set; } = "folder";
        public bool Expanded { get; set; }
        public bool Selected { get; set; }
        public List<TreeItem> Child { get; set; } = new List<TreeItem>();
        public string? ImageUrl { get; set; }
        public string? Url { get; set; }
        public string? Code { get; set; }
        public List<RelateCodeFile> RelatedFiles { get; set; } = new List<RelateCodeFile>();
        public string CodeUrl { get; set; }
        public string? PageUrl { get; set; }

        public static TreeItem FindNode(List<TreeItem> nodes, string id)
        {
            foreach (var node in nodes)
            {
                if (node.NodeId == id)
                {
                    return node;
                }

                var found = FindNode(node.Child, id);
                if (found != null)
                {
                    return found;
                }
            }

            return null;
        }
    }


    SfTreeView<TreeItem> tree;

    private void NodeSelected(NodeSelectEventArgs obj)
    {
        string id = obj.NodeData.Id;
        var clickedNode = TreeItem.FindNode(TreeDataSource, id);
        if (clickedNode != null)
        {
            if (clickedNode.Url != null)
            {
                NavigationManager.NavigateTo(clickedNode.Url);
            }
        }
        else
        {
            Console.WriteLine("Node not found");
        }
    }


}