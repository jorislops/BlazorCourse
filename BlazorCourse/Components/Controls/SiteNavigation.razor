@using Syncfusion.Blazor.Navigations
@inject NavigationManager NavigationManager
@inject CodeViewerService CodeViewerService

<SfTreeView TValue="TreeItem" @ref="_tree"
            ExpandOn="ExpandAction.Click">
    <TreeViewFieldsSettings DataSource="@_treeDataSource"
                            Id="NodeId" 
                            Text="NodeText" 
                            TValue="TreeItem"
                            IconCss="Icon"
                            NavigateUrl="Url"
                            Selected="Selected"
                            Expanded="Expanded"
                            Child="@("Child")">
    </TreeViewFieldsSettings>
    
</SfTreeView>

@code{
    List<TreeItem> _treeDataSource = new List<TreeItem>();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _treeDataSource = NavigationTreeData.GetNavigationTree();
        UpdateParentIds(_treeDataSource);
        
        NavigationManager.LocationChanged += LocationChanged;
        LocationChanged(new object(), new LocationChangedEventArgs(NavigationManager.Uri, true));
    }

    void UpdateParentIds(List<TreeItem> treeDataSource)
    {
        foreach (var treeItem in treeDataSource)
        {
            if (treeItem.Child.Count > 0)
            {
                foreach (var child in treeItem.Child)
                {
                    child.ParentId = treeItem.NodeId;
                    child.Parent = treeItem;
                }
                UpdateParentIds(treeItem.Child);
            }
        }
    }

    private void LocationChanged(object? sender, LocationChangedEventArgs e)
    {
        string url = e.Location;
        url = url.Replace(NavigationManager.BaseUri, "");
        if (url == "")
        {
            CodeViewerService.SelectedMenuMessage(url);
            InvokeAsync(StateHasChanged);
        }
        else
        {
            if(_treeDataSource != null)
            {
                TreeItem? navigatedNode = TreeItem.FindNodeByUrl(_treeDataSource, url);
                if (navigatedNode != null)
                {
                    navigatedNode.Selected = true;
                    DeselectAll(_treeDataSource);
                    navigatedNode.Selected = true;
                    ExpandParents(navigatedNode);
                    
                    CodeViewerService.SelectedMenuMessage(navigatedNode.NodeText);
                    InvokeAsync(StateHasChanged);
                }
            }
        }
    }

    public class TreeItem
    {
        public string NodeId { get; set; } = null!;
        public string NodeText { get; set; } = null!;
        public string Icon { get; set; } = "folder";
        public bool Expanded { get; set; }
        public string? ParentId = null;
        
        public bool Selected { get; set; }
        public List<TreeItem> Child { get; set; } = new List<TreeItem>();
        public string? ImageUrl { get; set; }
        public string? Url { get; set; }
        public string? Code { get; set; }
        public List<RelateCodeFile> RelatedFiles { get; set; } = new List<RelateCodeFile>();
        public string? CodeUrl { get; set; }
        public string? PageUrl { get; set; }
        public TreeItem? Parent { get; set; }


        public static TreeItem? FindNode(List<TreeItem> nodes, string id)
        {
            foreach (var node in nodes)
            {
                if (node.NodeId == id)
                {
                    return node;
                }

                var found = FindNode(node.Child, id);
                if (found != null)
                {
                    return found;
                }
            }

            return null;
        }

        public static TreeItem? FindNodeByUrl(List<TreeItem> nodes, string url)
        {
            foreach (TreeItem node in nodes)
            {
                if (node.Url != null)
                {
                    if (node.Url.Contains(url))
                    {
                        return node;
                    }
                }
            
                if(node.Child != null)
                {
                    TreeItem? found = FindNodeByUrl(node.Child, url);
                    if (found != null)
                    {
                        return found;
                    }
                }
            }
            return null;
        }
    }


    private SfTreeView<TreeItem> _tree = null!;

    private void NodeSelected(NodeSelectEventArgs obj)
    {
        string id = obj.NodeData.Id;
        var clickedNode = TreeItem.FindNode(_treeDataSource, id);
        if (clickedNode != null)
        {
            if (clickedNode.Url != null)
            {
                NavigationManager.NavigateTo(clickedNode.Url);
            }
        }
        else
        {
            Console.WriteLine("Node not found");
        }
    }


    void OnNodeExpanding(NodeExpandEventArgs args)
    {
        if(args.NodeData.Id != null)
        {
            TreeItem? node = TreeItem.FindNode(_treeDataSource!, args.NodeData.Id);
            if(node != null) {ExpandSelectedNode(node);}
        }
    }
    
    List<string> ExpandSelectedNode(TreeItem node)
    {
        var result = new List<string>();
        var currentNode = node;
        while (currentNode.ParentId != null)
        {
            result.Add(currentNode.ParentId);
            currentNode = currentNode.Parent;
        }

        return result;

        // if (node.Expanded != null)
        // {
        //     if(_expandedNodesList.Contains(node.NodeId) == false) _expandedNodesList.Add(node.NodeId);
        //     node.Expanded = true;
        // }
        // if (node.ParentId != null)
        // {
        //     TreeItem? parentNode = TreeItem.FindNode(_treeDataSource!, node.ParentId);
        //     if(parentNode is not null)
        //     {
        //         ExpandSelectedNode(parentNode);
        //     }
        // }
    }
    
    // void OnNodeCollapsing(NodeExpandEventArgs args)
    // {
    //     
    //     TreeItem? node = TreeItem.FindNode(_treeDataSource!, args.NodeData.Id);
    //     if (node != null)
    //     {
    //         if (_expandedNodesList.Contains(node.NodeId))
    //         {
    //             _expandedNodesList.Remove(node.NodeId);
    //             if (node.Expanded != null)
    //             {
    //                 node.Expanded = false;
    //             }
    //         }
    //
    //         if (args.NodeData.ParentID != null)
    //         {
    //             if(node.ParentId != null)
    //             {
    //                 TreeItem? parentNode = TreeItem.FindNode(_treeDataSource!, node.ParentId);
    //                 if (parentNode is not null)
    //                 {
    //                     DeselectAll(_treeDataSource);
    //                     parentNode.Selected = true;
    //                     ExpandParents(parentNode);
    //                 }
    //             }
    //         }
    //     }
    // }

    private void ExpandParents(TreeItem node)
    {
        if (node.Parent != null)
        {
            node.Parent.Expanded = true;
            ExpandParents(node.Parent);
        }
    }

    private void DeselectAll(List<TreeItem> nodes)
    {
        foreach (var node in nodes)
        {
            node.Selected = false;
            DeselectAll(node.Child);
        }
    }
    
    void OnNodeSelecting(NodeSelectEventArgs args)
    {
        if (args.NodeData.HasChildren)
        {
            args.Cancel = true;
        }
    }

}