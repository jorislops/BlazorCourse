@using Orientation = Radzen.Orientation
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject IJSRuntime Js
@inject CounterService CounterService

<RadzenComponents @rendermode="InteractiveServer" />

<CascadingValue Value="@AppState">
    <RadzenLayout>
        <RadzenHeader>
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
                
                <RadzenSidebarToggle Click="@(() => _sideBarExpanded = !_sideBarExpanded)" />
                <RadzenLabel Text="Blazor Examples" />
                
                
                <RadzenLabel Style="margin-left: auto;margin-right: 15px;">Counter by Service: @CounterService.Counter - by Cascade Parameter:  @AppState.Counter</RadzenLabel>
                
            </RadzenStack>
        </RadzenHeader>
        <RadzenSidebar @bind-Expanded="@(_sideBarExpanded)" Responsive="false">
            
            <div class="rz-p-4">
                <SiteNavigation></SiteNavigation>
            </div>
        </RadzenSidebar>
        <RadzenBody>
            <div class="rz-p-4">
                @if (_showCode)
                {
                    <RadzenSplitter Orientation="Orientation.Horizontal">
                        <RadzenSplitterPane>
                            <CodeViewer Uri="@NavigationManager.GetUriWithQueryParameter("presenting", (bool?)null)" BaseUri="@NavigationManager.BaseUri"></CodeViewer>
                        </RadzenSplitterPane>
                        <RadzenSplitterPane>
                            @Body
                        </RadzenSplitterPane>
                    </RadzenSplitter>
                }
                else
                {
                    @Body
                }
            </div>
        </RadzenBody>
    </RadzenLayout>


</CascadingValue>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code
{
    //Query parameter for presentation mode -> sidebar is disabled
    [SupplyParameterFromQuery] public bool Presenting { get; set; } = false;

    bool _showCode = true;
    
    bool _sideBarExpanded = true;
    
    //make sure that AppState is initialized
    private AppState AppState { get; } = new();


    protected override void OnInitialized()
    {
        //Close sidebar when in presenting mode
        if (Presenting)
        {
            _sideBarExpanded = false;
        }

        //CounterService.CountHasChanged += StateHasChanged; 
        //same as above
        CounterService.CountHasChanged += () =>
        {
            InvokeAsync(StateHasChanged);
        };

        AppState.CountHasChanged += StateHasChanged;
    }
}