@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject IJSRuntime Js
@inject CounterService CounterService


<CascadingValue Value="@AppState">
    <div class="page">
        <div>
            <SfToolbar CssClass="defaultToolbar" Height="50px">
                <ToolbarEvents Clicked="@Toggle"></ToolbarEvents>
                <ToolbarItems>
                    <ToolbarItem PrefixIcon="e-icons e-menu" TooltipText="Menu"></ToolbarItem>
                    <ToolbarItem>
                        <Template>
                            <div class="e-folder">
                                <div class="e-folder-name">Blazor Examples</div>
                                <div>Counter: @CounterService.Counter</div>
                            </div>
                        </Template>
                    </ToolbarItem>
                    <ToolbarItem Align="ItemAlign.Right">
                        <Template>
                            <SfButton @onclick="ToggleCode" IconCss="@(_showCode ? "e-icons e-insert-code" : "e-icons e-code-view")" IconPosition="@IconPosition.Right">
                                @(_showCode ? "Hide Code" : "Show Code")
                            </SfButton>
                        </Template>
                    </ToolbarItem>
                </ToolbarItems>
            </SfToolbar>
        </div>
        <div id="wrapper">
            @*Initialize the Sidebar component*@
            @*querymedia isnt't possible when you want to force the sidebar closed in presenting mode*@
            <SfSidebar Width="386px"
                       Target=".main-content"
                       Type="SidebarType.Push"
                       @bind-IsOpen="_sidebarToggle"
                       @attributes="_htmlAttribute"
                       OnOpen="OnOpen">
                <ChildContent>
                    <div class="main-menu">
                        <div>
                            <SiteNavigation></SiteNavigation>
                        </div>
                    </div>
                </ChildContent>
            </SfSidebar>
        </div>
        @*main-content declaration*@
        <div class="main-content" id="main-text">
            <div class="sidebar-content">
                <div class="content px-4">
                    @if (_showCode)
                    {
                        <SfSplitter Width="100%" SeparatorSize="3">
                            <SplitterPanes >
                                <SplitterPane size="50%">
                                    <ContentTemplate>
                                        <CodeViewer Uri="@NavigationManager.GetUriWithQueryParameter("presenting", (bool?)null)" BaseUri="@NavigationManager.BaseUri"></CodeViewer>
                                    </ContentTemplate>
                                </SplitterPane>
                                <SplitterPane>
                                    <ContentTemplate >
                                        @Body
                                    </ContentTemplate>
                                </SplitterPane>
                            </SplitterPanes>
                        </SfSplitter>
                    }
                    else
                    {
                        @Body
                    }
                </div>
            </div>
        </div>
    </div>
</CascadingValue>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code
{
    //Query parameter for presentation mode -> sfSidebar is disabled
    [SupplyParameterFromQuery] public bool Presenting { get; set; }

    bool _showCode = true;

    //string _codeFileUri = "";
    // Specify the value of Sidebar component state. It indicates whether the sidebar component is in an open/close state.
    bool _sidebarToggle = true;

    readonly Dictionary<string, object> _htmlAttribute = new()
    {
        { "class", "sidebar-treeview" }
    };

    //make sure that AppState is initialized
    private AppState AppState { get; } = new();


    protected override void OnInitialized()
    {
        //Close sidebar when in presenting mode
        if (Presenting) _sidebarToggle = false;

        CounterService.CountHasChanged += () =>
        {
            InvokeAsync(StateHasChanged);
        };
    }

    void OnOpen()
    {
        //force keep sidebar closed when in presenting mode
        if (Presenting) _sidebarToggle = false;
    }

    // Specifies the event handler for Clicked event in the menu button component.
    void Toggle(ClickEventArgs args)
    {
        if (args.Item.TooltipText == "Menu")
        {
            _sidebarToggle = !_sidebarToggle;
            //remove focus from button
            Js.InvokeAsync<string>("document.activeElement.blur");
        }
    }

    //specifies the event handler for the click event in the Code button component
    void ToggleCode()
    {
        _showCode = !_showCode;
        //remove focus from button
        Js.InvokeAsync<string>("document.activeElement.blur");
    }
}