@page "/code-viewer"
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Layouts
@using System.Web

@inject NavigationManager NavigationManager

<style>
    .e-splitter.e-splitter-horizontal .e-pane.e-pane-horizontal  {
        overflow: hidden;
    }
</style>

<div class="col-lg-12 control-section">
    <div class="row mb-4">
            <div class="col">
                <h3>File: @_codeFile</h3>
            </div>
        </div>
    @* <div class="row mb-4"> *@
    @*     <div class="col"> *@
    @*         <SfDropDownList TValue="string" TItem="RelatedCode" Placeholder="Select a related code file" DataSource="@LocalData"> *@
    @*             <DropDownListFieldSettings Value="ID" Text="Text"></DropDownListFieldSettings> *@
    @*             <DropDownListEvents TValue="string" TItem="RelatedCode" ValueChange="OnRelatedCodeFileValueChange"></DropDownListEvents> *@
    @*         </SfDropDownList> *@
    @*     </div> *@
    @* </div> *@
    <div class="row">
        <SfSplitter Height="100%" Width="100%" SeparatorSize="3">
            <SplitterPanes>
                <SplitterPane Size="48%" Collapsible="true">
                    <ContentTemplate>
                        <div>
                            <div class="content">
                                <StandaloneCodeEditor @ref="_codeEditor" Id="my-editor-instance-id"
                                                      CssClass="my-editor"
                                                      ConstructionOptions="EditorConstructionOptions"/>
                            </div>
                        </div>
                    </ContentTemplate>
                </SplitterPane>
                <SplitterPane CssClass="remove-scroll">
                    <ContentTemplate>
                        <iframe src="@_pageUrl" style="height: 100%; width: 100%; overflow: hidden;"></iframe>
                    </ContentTemplate>
                </SplitterPane>
            </SplitterPanes>
        </SfSplitter>
    </div>
</div>

@code {
    private string _code = "Not loaded yet";
    private string? _pageUrl;
    private StandaloneCodeEditor _codeEditor = null!;
    private string? _codeFile;
    private string? _pageUrlParam;
    
    public class RelatedCode
    {
        public string Id { get; set; } = null!;
        public string Text { get; set; } = null!;
        public string CodeFile { get; set; } = null!;
    }
    //
    // readonly List<RelatedCode> LocalData = new()
    // {
    //     new RelatedCode { ID = "CounterWithParameter", Text = "CounterWithParameter", CodeFile = "Components/Parameters/CounterWithParameter.razor" },
    //     new RelatedCode { ID = "Game2", Text = "Badminton" },
    //     new RelatedCode { ID = "Game3", Text = "Basketball" },
    //     new RelatedCode { ID = "Game4", Text = "Cricket" },
    //     new RelatedCode { ID = "Game5", Text = "Football" },
    //     new RelatedCode { ID = "Game6", Text = "Golf" },
    //     new RelatedCode { ID = "Game7", Text = "Hockey" },
    //     new RelatedCode { ID = "Game8", Text = "Rugby" },
    //     new RelatedCode { ID = "Game9", Text = "Snooker" },
    //     new RelatedCode { ID = "Game10", Text = "Tennis" }
    // };

    

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += LocationChanged;

        ParseQueryStringParams();

        var navigationTreeData = NavigationTreeData.GetNavigationTree();
        var relatedFiles = FindNodeWithUrl(navigationTreeData, _pageUrlParam);
    }

    private List<RelateCodeFile> FindNodeWithUrl(List<SiteNavigation.TreeItem> navigationTreeData, string? navigationManagerUri)
    {
        foreach (var item in navigationTreeData)
        {
            if (item.PageUrl == navigationManagerUri)
            {
                return item.RelatedFiles;
            }

            // if (item.Child != null)
            // {
                var resultFromChild = FindNodeWithUrl(item.Child, navigationManagerUri);
                if (resultFromChild.Any())
                {
                    return resultFromChild;
                }
            // }
        }

        return Enumerable.Empty<RelateCodeFile>().ToList();
    }

    private void LocationChanged(object? sender, LocationChangedEventArgs e)
    {
        ParseQueryStringParams();

        _codeEditor.SetValue(_code);
        StateHasChanged();
    }

    private void ParseQueryStringParams(string? codeFile = null)
    {
        var queryString = new Uri(NavigationManager.Uri).Query;
        var queryDictionary = HttpUtility.ParseQueryString(queryString);

        if (codeFile == null)
        {
            _codeFile = queryDictionary["code-url"];
        }
        else
        {
            _codeFile = codeFile;
        }

        if (!string.IsNullOrEmpty(_codeFile))
        {
            _code = GetCode(_codeFile);
        }

        var pageUrl = queryDictionary["page-url"];
        if (!string.IsNullOrEmpty(pageUrl))
        {
            _pageUrlParam = pageUrl;
            _pageUrl = NavigationManager.BaseUri + pageUrl + "?show-nav=false";
        }
    }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Language = "razor",
            Value = _code
        };
    }

    public string GetCode(string codeFile)
    {
        var codefile = NavigationManager.BaseUri + $"code/Pages/{codeFile}.txt";
        var client = new HttpClient();
        var code = client.GetStringAsync(codefile).Result;
        return code;
    }


    private void OnRelatedCodeFileValueChange(ChangeEventArgs<string, RelatedCode> obj)
    {
        ParseQueryStringParams(obj.ItemData.CodeFile);
        _codeEditor.SetValue(_code);
    }

}


<style>
    .e-splitter .content {
        padding: 20px;
    }
    .e-splitter p {
        margin-top: 10px;
    }
    .expand-pane {
        margin: 20px auto;
        max-width: 820px;
    }
        /* styles to hide scroll bars */
        .expand-pane .e-pane.e-pane-horizontal.e-scrollable::-webkit-scrollbar,
        .expand-pane .e-pane.e-pane-vertical.e-scrollable::-webkit-scrollbar {
            display: none;
        }
        .expand-pane .e-pane.e-pane-horizontal.e-scrollable, .expand-pane .e-pane.e-pane-vertical.e-scrollable {
            scrollbar-width: none;
            -ms-overflow-style: none;
        }
    .control-section {
        min-height: 370px;
        margin-bottom: 15px;
        margin-top: 10px;
    }
    #inner-splitter {
        border: transparent;
    }
</style>


<style>
    .my-editor {
        height: 1024px;
        width: 100%;
    }
</style>