@page "/events"
<h3>Events</h3>

<p>@_message</p>

<h4>Click events</h4>
<button class="btn btn-success" @onclick="ButtonClicked">Click me</button>
<a class="btn btn-success" @onclick="HyperlinkDisguisedAsButtonClicked">Click me</a>

<h5>Event Parameters</h5>
@foreach (var btnNumber in Enumerable.Range(1, 5))
{
    <button class="btn btn-primary" @onclick="() => ButtonClickedWithParameter(btnNumber)">@btnNumber</button>
}

<h5>Event Arguments</h5>

<div @onmousemove="@(mouseEvent => MouseMove(mouseEvent))" style="border: 2px dashed red">
    @* Below is the same as the above line, but with a different syntax *@
    @* <div @onmousemove="@OnMouseMove" style="border: 2px dashed red"> *@
    <p>Move your mouse over me</p>

    <p>Mouse X: @_mouseX Mouse Y: @_mouseY</p>
    <p>Mouse X Relative: @_mouseXRelative Mouse Y Relative: @_mouseYRelative</p>
</div>

@code {
    private string _message = string.Empty;
    private double _mouseX;
    private double _mouseY;
    private double _mouseYRelative;
    private double _mouseXRelative;

    private void ButtonClicked()
    {
        _message = "Button Clicked";
    }

    private void HyperlinkDisguisedAsButtonClicked()
    {
        _message = "Hyperlink Clicked";
    }

    private void ButtonClickedWithParameter(int btnNumber)
    {
        _message = $"Button Clicked with parameter {btnNumber}";
    }

    private void MouseMove(MouseEventArgs eventArgs)
    {
        _mouseX = eventArgs.ClientX;
        _mouseY = eventArgs.ClientY;

        _mouseXRelative = eventArgs.OffsetX;
        _mouseYRelative = eventArgs.OffsetY;
    }

}